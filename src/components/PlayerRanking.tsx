import React from 'react';
import { PlayerRanking as PlayerRankingType } from '../types';
import { getPointsStatistics } from '../utils/scoring';

interface PlayerRankingProps {
  rankings: PlayerRankingType[];
}

const PlayerRanking: React.FC<PlayerRankingProps> = ({ rankings }) => {
  const statistics = getPointsStatistics(rankings);

  if (!rankings.length) {
    return (
      <div className="ranking-container">
        <h2>–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤</h2>
        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞</p>
      </div>
    );
  }

  return (
    <div className="ranking-container">
      <h2>–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ TEKKEN RIVALS</h2>
      
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="statistics">
        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        <div className="stats-grid">
          <div className="stat-item">
            <span className="stat-label">–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤:</span>
            <span className="stat-value">{statistics.total_players}</span>
          </div>
          <div className="stat-item">
            <span className="stat-label">–ò–≥—Ä–æ–∫–æ–≤ —Å –æ—á–∫–∞–º–∏:</span>
            <span className="stat-value">{statistics.players_with_points}</span>
          </div>
          <div className="stat-item">
            <span className="stat-label">–ú–∞–∫—Å–∏–º—É–º –æ—á–∫–æ–≤:</span>
            <span className="stat-value">{statistics.max_points}</span>
          </div>
          <div className="stat-item">
            <span className="stat-label">–°—Ä–µ–¥–Ω–µ–µ –æ—á–∫–æ–≤:</span>
            <span className="stat-value">{statistics.average_points}</span>
          </div>
        </div>
      </div>

      {/* –†–µ–π—Ç–∏–Ω–≥ */}
      <div className="rankings-table">
        <h3>–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞</h3>
        <table>
          <thead>
            <tr>
              <th>–ú–µ—Å—Ç–æ</th>
              <th>–ò–≥—Ä–æ–∫</th>
              <th>Challonge</th>
              <th>–û—á–∫–∏</th>
              <th>–¢—É—Ä–Ω–∏—Ä–æ–≤</th>
              <th>–õ—É—á—à–µ–µ –º–µ—Å—Ç–æ</th>
              <th>–£—á–∞—Å—Ç–∏–µ %</th>
            </tr>
          </thead>
          <tbody>
            {rankings.map((ranking) => (
              <tr key={ranking.player.challonge_username}>
                <td className="position">
                  {ranking.position}
                  {ranking.position <= 3 && (
                    <span className="medal">
                      {ranking.position === 1 ? 'ü•á' : 
                       ranking.position === 2 ? 'ü•à' : 'ü•â'}
                    </span>
                  )}
                </td>
                <td className="player-name">{ranking.player.name}</td>
                <td className="username">{ranking.player.challonge_username}</td>
                <td className="points">{ranking.points}</td>
                <td>{ranking.player.tournaments_participated}</td>
                <td>
                  {ranking.player.best_rank 
                    ? `${ranking.player.best_rank}${getOrdinalSuffix(ranking.player.best_rank)}`
                    : '-'
                  }
                </td>
                <td>{Math.round(ranking.player.participation_rate * 100)}%</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

    </div>
  );
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ —á–∏—Å–ª–∞
 */
function getOrdinalSuffix(num: number): string {
  const j = num % 10;
  const k = num % 100;
  
  if (j === 1 && k !== 11) {
    return 'st';
  }
  if (j === 2 && k !== 12) {
    return 'nd';
  }
  if (j === 3 && k !== 13) {
    return 'rd';
  }
  return 'th';
}

export default PlayerRanking;
