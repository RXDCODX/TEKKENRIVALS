import React, { useRef, ReactNode, useState, useEffect, useCallback } from 'react';
import { AudioContext, AudioContextType } from './AudioContextDefinition';

interface AudioProviderProps {
  children: ReactNode;
}

export const AudioProvider: React.FC<AudioProviderProps> = ({ children }) => {
  const backgroundMusicRef = useRef<HTMLAudioElement | null>(null);
  const [isMuted, setIsMuted] = useState(true); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω
  const [isSplashActive, setIsSplashActive] = useState(true); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é splash –∞–∫—Ç–∏–≤–µ–Ω

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
  useEffect(() => {
    const savedState = localStorage.getItem('audioEnabled');
    console.log('üîä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ localStorage:', savedState);
    if (savedState !== null) {
      const audioEnabled = JSON.parse(savedState);
      console.log('üîä audioEnabled –∏–∑ localStorage:', audioEnabled, '—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isMuted:', !audioEnabled);
      setIsMuted(!audioEnabled);
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω
      console.log('üîä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—ã–∫–ª—é—á–µ–Ω');
      setIsMuted(true);
    }
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–µ–∑ –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  useEffect(() => {
    if (backgroundMusicRef.current) {
      backgroundMusicRef.current.muted = isMuted;
      backgroundMusicRef.current.volume = 0.3;
      // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
  }, [isMuted]); // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    console.log('üîä useEffect —Å—Ä–∞–±–æ—Ç–∞–ª:', { isSplashActive, isMuted, hasAudio: !!backgroundMusicRef.current });
    if (backgroundMusicRef.current && !isSplashActive && !isMuted) {
      console.log('üîä –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–∑ useEffect');
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ splash –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –∑–≤—É–∫ –≤–∫–ª—é—á–µ–Ω
      backgroundMusicRef.current.play().catch(console.error);
    }
  }, [isSplashActive, isMuted]);

  const muteBackgroundMusic = useCallback(() => {
    if (backgroundMusicRef.current) {
      backgroundMusicRef.current.muted = true;
      backgroundMusicRef.current.pause();
      setIsMuted(true);
      localStorage.setItem('audioEnabled', 'false');
    } else {
      setIsMuted(true);
      localStorage.setItem('audioEnabled', 'false');
    }
  }, []);

  const unmuteBackgroundMusic = useCallback(() => {
    console.log('üîä unmuteBackgroundMusic –≤—ã–∑–≤–∞–Ω, isSplashActive:', isSplashActive);
    if (backgroundMusicRef.current) {
      backgroundMusicRef.current.muted = false;
      setIsMuted(false);
      localStorage.setItem('audioEnabled', 'true');
    } else {
      setIsMuted(false);
      localStorage.setItem('audioEnabled', 'true');
    }
  }, [isSplashActive]);

  const setBackgroundMusic = useCallback((audio: HTMLAudioElement) => {
    backgroundMusicRef.current = audio;
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—É
    if (audio) {
      audio.muted = isMuted;
      audio.volume = 0.3;
      // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
  }, [isMuted]);

  const setSplashActive = useCallback((active: boolean) => {
    setIsSplashActive(active);
    // –õ–æ–≥–∏–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º useEffect
  }, []);

  const value: AudioContextType = {
    backgroundMusic: backgroundMusicRef.current,
    muteBackgroundMusic,
    unmuteBackgroundMusic,
    isMuted,
    setBackgroundMusic,
    setSplashActive,
  };

  return (
    <AudioContext.Provider value={value}>
      {children}
    </AudioContext.Provider>
  );
};
