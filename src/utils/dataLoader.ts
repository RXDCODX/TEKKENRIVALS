// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è

export interface DataVersion {
  version: string;
  timestamp: number;
}

export class DataLoader {
  private static instance: DataLoader;
  private cache: Map<string, any> = new Map();
  private versions: Map<string, DataVersion> = new Map();

  public static getInstance(): DataLoader {
    if (!DataLoader.instance) {
      DataLoader.instance = new DataLoader();
    }
    return DataLoader.instance;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param path –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @param forceRefresh –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
   * @returns Promise —Å –¥–∞–Ω–Ω—ã–º–∏
   */
  public async loadJson<T = any>(
    path: string,
    forceRefresh: boolean = false
  ): Promise<T> {
    const cacheKey = path;

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (!forceRefresh && this.cache.has(cacheKey)) {
      return this.cache.get(cacheKey);
    }

    try {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π URL —Å timestamp
      const timestamp = Date.now();
      const url = `${path}?v=${timestamp}&t=${Math.random()}`;

      const response = await fetch(url, {
        method: "GET",
        headers: {
          "Cache-Control": "no-cache, no-store, must-revalidate",
          Pragma: "no-cache",
          Expires: "0",
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      this.cache.set(cacheKey, data);
      this.versions.set(cacheKey, {
        version: timestamp.toString(),
        timestamp: Date.now(),
      });

      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${path} (–≤–µ—Ä—Å–∏—è: ${timestamp})`);
      return data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ${path}:`, error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
   * @param tournaments –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä–æ–≤
   * @param forceRefresh –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
   * @returns Promise —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
   */
  public async loadTournamentData(
    tournaments: string[],
    forceRefresh: boolean = false
  ): Promise<{ [key: string]: any }> {
    const data: { [key: string]: any } = {};

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    const promises = tournaments.map(async (tournament) => {
      try {
        const tournamentData = await this.loadJson(
          `./data/${tournament}.json`,
          forceRefresh
        );
        data[tournament] = tournamentData;
      } catch (error) {
        console.warn(
          `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournament}:`,
          error
        );
      }
    });

    await Promise.allSettled(promises);
    return data;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫–µ—à
   */
  public clearCache(): void {
    this.cache.clear();
    this.versions.clear();
    console.log("üóëÔ∏è –ö–µ—à –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω");
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –¥–∞–Ω–Ω—ã—Ö
   * @param path –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @returns –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –∏–ª–∏ null
   */
  public getVersionInfo(path: string): DataVersion | null {
    return this.versions.get(path) || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ
   * @param path –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @returns true –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ
   */
  public hasInCache(path: string): boolean {
    return this.cache.has(path);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const dataLoader = DataLoader.getInstance();
